
usage: nsys profile [<args>] [application] [<application args>]

	-b, --backtrace=

	   Possible values are 'lbr', 'fp', 'dwarf', or 'none'.
	   Select the backtrace method to use while sampling.
	   Select 'none' to disable backtrace collection.
	   Default is 'lbr'.

	-c, --capture-range=

	   Possible values are none, cudaProfilerApi, nvtx, hotkey.
	   When '-c cudaProfilerApi' is used, profiling will start only when cudaProfilerStart API is
	   invoked in the application.
	   When '-c nvtx' is used, profiling will start only when the specified NVTX range is
	   started in the application.
	   When '-c hotkey' is used, profiling will start only when the hotkey
	   set by '--hotkey-capture' is pressed in the application. This works for graphic apps only.
	   Note that you must enable CUDA or NVTX tracing of the target application
	   for '-c cudaProfilerApi' or '-c nvtx' to work.
	   When '-capture-range none' is used, cudaProfilerStart/Stop APIs and hotkey will
	   be ignored and NVTX ranges will be ignored as collection start/stop triggers.
	   Default is none.

	--capture-range-end=

	   Possible values are 'none', 'stop', 'stop-shutdown', 'repeat[:N]' or 'repeat-shutdown:N'.
	   Specify the desired behavior when a capture range ends. Applicable only when used along
	   with --capture-range option.
	   If 'none', capture range end will be ignored.
	   If 'stop', collection will stop at capture range end. Any subsequent capture ranges will be
	   ignored. Target app will continue running.
	   If 'stop-shutdown', collection will stop at capture range end and session will be shutdown.
	   If 'repeat[:N]', collection will stop at capture range end and subsequent capture ranges
	   will trigger more collections.
	   Use the optional ':N' to specify max number of capture ranges to be honored. Any subsequent
	   capture ranges will be ignored once N capture ranges are collected.
	   If 'repeat-shutdown:N', same behavior as 'repeat:N' but session will be shutdown after N
	   ranges.
	   For 'stop-shutdown' and 'repeat-shutdown:N', use --kill option to specify the signal to be
	   sent to target app when shutting down session.
	   Default is 'stop-shutdown'.

	--command-file=

	   Open a file that contains nsys switches and parse the switches. Note that
	   command line switches will override switches found in the command-file.

	--cpu-core-events=

	   CPU Core events to sample.
	   Possible values are (for example) '2,3,...'.
	   Use the '--cpu-core-events=help' switch to see the full list of events.
	   Multiple values can be selected, separated by commas only (no spaces).
	   Requires root privileges or a paranoid level of 0 or less.
	   Use the --event-sample switch to enable.

	--cpu-core-metrics=

	   CPU Core metrics to collect.
	   Possible values are (for example) '2,3,...'.
	   Use the '--cpu-core-metrics=help' switch to see the full list of metrics.
	   Multiple values can be selected, separated by commas only (no spaces).
	   Requires root privileges or a paranoid level of 0 or less.
	   Use the --event-sample switch to enable.

	--cpuctxsw=

	   Possible values are 'process-tree', 'system-wide', or 'none'.
	   Trace OS thread scheduling activity. Select 'none' to disable tracing CPU context switches.
	   'system-wide' requires root privileges or a paranoid level of 0 or less.
	   If CPU IP/backtrace sampling is enabled, --cpuctxsw equals the --sample setting.
	   For example, if --sample=process-tree, then --cpuctxsw=process-tree.
	   If --sample=none and a target application is launched, the default is 'process-tree',
	   otherwise the default is 'none'.

	--cuda-flush-interval=

	   Set the interval, in milliseconds, when buffered CUDA data is automatically saved to
	   storage. CUDA data buffer saves may cause profiler overhead. Buffer save behavior can be
	   controlled with this switch.

	   If the CUDA flush interval is set to 0 on systems running CUDA 11.0 or newer, buffers are
	   saved when they fill. If a flush interval is set to a non-zero value on such systems,
	   buffers are saved only when the flush interval expires. If a flush interval is set and the
	   profiler runs out of available buffers before the flush interval expires, additional buffers
	   will be allocated as needed. In this case, setting a flush interval can reduce buffer
	   save overhead but increase memory use by the profiler.

	   If the flush interval is set to 0 on systems running older versions of CUDA,
	   buffers are saved at the end of the collection. If the profiler runs out of available
	   buffers, additional buffers are allocated as needed. If a flush interval is set to a
	   non-zero value on such systems, buffers are saved when the flush interval expires.
	   A cuCtxSynchronize call may be inserted into the workflow before the buffers
	   are saved which will cause application overhead. In this case, setting a flush interval
	   can reduce memory use by the profiler but may increase save overhead.
	   Default is '0'. Application scope.

	--cuda-graph-trace=<granularity>[:<launch origin>]

	   Set the granularity and launch origin for CUDA graph trace.
	   Applicable only when CUDA tracing is enabled.

	   Possible values for <granularity> are 'graph' or 'node'.
	   If 'graph' is selected, CUDA graphs will be traced as a whole and node
	   activities will not be collected. This can reduce overhead to the minimal,
	   but requires CUDA driver version 11.7 or higher.
	   If 'node' is selected, node activities will be collected, but CUDA graphs
	   will not be traced as a whole. This may cause significant runtime overhead.
	   If CUDA driver version is 11.7 or higher, default is 'graph', otherwise default is 'node'.

	   Possible values for <launch origin> are 'host-only' or 'host-and-device'.
	   If 'host-only' is selected, only CUDA graphs launched from host codes will be traced.
	   If 'host-and-device' is selected, CUDA graphs launched from host codes and device codes
	   will both be traced. This is only supported when the granularity is set to 'graph' and
	   the CUDA driver is version 12.3 or higher. This may cause significant runtime overhead.
	   If granularity is set to 'graph' and the CUDA driver version is 12.3 or higher,
	   the default is 'host-and-device', otherwise default is 'host-only'.'.

	   Application scope.

	--cuda-memory-usage=

	   Possible values are 'true' or 'false'.
	   Track the GPU memory usage. Applicable only when CUDA tracing is enabled.
	   This feature may cause significant runtime overhead.
	   Default is 'false'. Application scope.

	--cuda-um-cpu-page-faults=

	   Possible values are 'true' or 'false'.
	   Track the CPU page faults that occur with Unified Memory.
	   Applicable only when CUDA tracing is enabled.
	   This feature may cause significant runtime overhead.
	   Default is 'false'. Application scope.

	--cuda-um-gpu-page-faults=

	   Possible values are 'true' or 'false'.
	   Track the GPU page faults that occur with Unified Memory.
	   Applicable only when CUDA tracing is enabled.
	   This feature may cause significant runtime overhead.
	   Default is 'false'. Application scope.

	--cudabacktrace=

	   Possible values are 'all','none','kernel','memory','sync','other'.
	   If tracing CUDA APIs, enable the collection of a backtrace when a CUDA API is invoked.
	   When selected, significant runtime overhead may occur.
	   Values may be combined using ','.
	   Each value except 'none' may be appended with a threshold after ':'.
	   Threshold is the duration, in nanoseconds, that CUDA APIs must execute before backtraces are
	   collected, e.g. 'kernel:500'.
	   Default value for each threshold is 80000ns (80us).
	   Note that CPU sampling must be enabled.
	   Default is 'none'. Application scope.

	-d, --duration=

	   Collection duration in seconds.
	   Default is 0 seconds.

	--duration-frames=

	   Stop the recording session after this many frames have been captured.
	   Minimum supported frame is '60'.
	   Note when it is selected cannot include any other stop options.
	   If not specified the default is disabled. Application scope.

	-e, --env-var=

	   Set environment variable(s) for application process to be launched.
	   Environment variable(s) should be defined as 'A=B'.
	   Multiple environment variables can be specified as 'A=B,C=D'

	--event-sample=

	   Enable event sampling.
	   Possible values are 'system-wide' or 'none'.
	   Select 'none' to disable event sampling.
	   The default is 'none'.
	   Use the '--cpu-core-events=help' and the '--os-events=help' switches to see the
	   full list of events.
	   Requires root privileges or a paranoid level of 0 or less.
	   If event sampling is enabled and no events are selected,
	   the CPU Core event 'Instructions Retired' is selected by default.

	(Deprecated) --event-sampling-frequency=

	   WARNING: This switch is no longer supported.
	   Please use the event-sampling-interval switch instead.

	--event-sampling-interval=

	   The interval between each event sample collection.
	   Minimum event sampling interval is '1' milliseconds.
	   Maximum event sampling interval is '1000' milliseconds.
	   The default is '10' milliseconds.

	--export=<format>[,<format>...]

	   Possible formats are: none arrow sqlite hdf text json arrow arrowdir parquetdir
	   Create additional output file(s) based on the data collected.
	   If 'none' is selected, no additional files are created.
	   Default is 'none'. This option can be given more than once.

	-f, --force-overwrite=

	   Possible values are 'true' or 'false'.
	   If true, overwrite all existing result files with same output filename
	   (QDSTRM, nsys-rep, SQLITE, HDF, TEXT, JSON, ARROW, ARROWDIR, PARQUETDIR).
	   Default is 'false'.

	--flush-on-cudaprofilerstop=

           If set to 'true', any call to cudaProfilerStop() will
           cause the CUDA trace buffers to be flushed. Note that the CUDA trace
           buffers will be flushed when the collection ends, irrespective of the
           value of this switch. Default value is 'true'.

	--ftrace=

	   Collect ftrace events.
	   Argument should list events to collect as: subsystem1/event1,subsystem2/event2.
	   To collect trace markers, set '--ftrace=ftrace/print'.
	   Requires root privileges.
	   Default is '' (no ftrace events are collected by default). System scope.

	--ftrace-keep-user-config=

	   Possible values are 'true' or 'false'.
	   Skip initial ftrace setup and collect already configured events.
	   Default is 'false' (nsys will reset the ftrace configuration).

	--gpu-metrics-device=

	   Collect GPU Metrics from specified devices.
	   The option argument must be 'none' or one of GPU IDs reported
	   by '--gpu-metrics-device=help' switch.
	   Default is 'none'. System scope.

	--gpu-metrics-frequency=

	   Specify GPU Metrics sampling frequency.
	   Minimum supported frequency is '10' (Hz).
	   Maximum supported frequency is '200000' (Hz).
	   Default is '10000'. System scope.

	--gpu-metrics-set=

	   Specify metric set for GPU Metrics sampling.
	   The option argument must be one of indices reported by '--gpu-metrics-set=help' switch.
	   Default is the first metric set that supports selected GPU. System scope.

	--gpu-video-device=

           Collect GPU video accelerator traces from specified devices.
           The argument must be 'none' or one or more GPU IDs reported by '--gpu-video-device=help'.
           Default is 'none'. System scope.

	--gpuctxsw=

	   Possible values are 'true' or 'false'.
	   Trace GPU context switches. This switch requires CUDA driver r435.17 or higher.
	   Default is 'false'. System scope.

	-h, --help=[<tag>]

	   Print the command's help menu. The switch can take one optional
	   argument that will be used as a tag. If a tag is provided, only options
	   relevant to the tag will be printed.
	   The available help menu tags for this command are:

	   app, application, backtrace, capture, cli, command, cpu, cuda, env,
	   environment, export, file, filter, fork, frame, ftrace, gpu, hotkey,
	   interactive, log, logs, memory, metric, metrics, mpi, network, nic, nvtx,
	   opengl, os, osrt, output, pmu, profile, profiling, range, run, sample,
	   sampling, session, stats, switch, symbol, symbols, trace, user, uvm, vulkan, and wait.

	--hotkey-capture=

	   Possible values are `F1` to `F12`.
	   Hotkey to trigger the profiling session.
	   Note that this switch is applicable only when --capture-range=hotkey is specified.
	   Default is `F12`.

	--ib-net-info-devices=

                A comma-separated list of NICs names.
                The NICs which ibdiagnet will use for networks discovery.
                This option creates the ibdiagnet files to be used for
                collecting network information.
                Example value: 'mlx5_0,mlx5_1'.
                If the --ib-net-info-output option is set then Nsight Systems will store the network information at this path.
                Otherwise it will be created at a temporary path
                and will be discarded after processing.
                If more than one NIC was specified, only the last network information file be saved.
                Note that this option should not be used together with
                the --ib-net-info-files option.

	--ib-net-info-files=

                A comma-separated list of file paths.
                Paths of an existing ibdiagnet db_csv files, containing networks information data.
                Nsight Systems will read the networks information from these files.
                Don't use '~' alias within the path.
                Note that this option should not be used together with
                the --ib-net-info-devices option.

	--ib-net-info-output=

                Sets the path of a directory into which
                ibdiagnet network discovery data will be written.
                Use this option together with the --ib-net-info-devices option.
                Don't use '~' alias within the path.

	(Experimental) --ib-switch-congestion-device=<IB switch GUID>[,<IB switch GUID>...]

	   A comma-separated list of InfiniBand switch GUIDs.
	   Collect InfiniBand switch congestion events from switches identified by
	   the specified GUIDs.
	   This switch can be used multiple times.
	   Default is an empty list. System scope.
	   Use the --ib-switch-congestion-nic-device, --ib-switch-congestion-percent,
	   and --ib-switch-congestion-threshold-high switches to further control how
	   congestion events are collected.

	(Experimental) --ib-switch-congestion-nic-device=

	   The name of the NIC (HCA) through which InfiniBand switches will be
	   accessed. By default, the first active NIC will be used.
	   One way to find a NIC's name is via the
	   `ibnetdiscover --Hca_list | grep "$(hostname)"` command.
	   Example usage: --ib-switch-congestion-nic-device=mlx5_3

	(Experimental) --ib-switch-congestion-percent=

	   Percent of InfiniBand switch congestion events to be collected.
	   This option enables reducing the network bandwidth consumed
	   by reporting congestion events.
	   Values are in the [1,100] range. Default value is 50.

	(Experimental) --ib-switch-congestion-threshold-high=

	   High threshold percentage for InfiniBand switch egress port queue size.
	   When a packet enters an InfiniBand switch, its data is stored at an
	   ingress port buffer. A pointer to the packet's data is inserted into
	   the egress port's queue, from which the packet will be exiting the switch.
	   At that point, the threshold given by this command line argument is compared
	   to the egress queue data size. If the queue data size exeeds the threshold,
	   a congestion event is reported.
	   The threshold is given in percent of the ingress port size.
	   An egress port queue can point data coming from multiple ingress port
	   buffers, therefore the threshold can be bigger than 100%.
	   Values are in the [1,1023] range, default value is 75 percent.

	(Experimental) --ib-switch-metrics-device=<IB switch GUID>[,<IB switch GUID>...]

	   A comma-separated list of InfiniBand switch GUIDs.
	   Collect metrics from the specified InfiniBand switches.
	   This switch can be used multiple times.
	   Default is an empty list. System scope.

	--kill=

	   Possible values are 'none', 'sigkill', 'sigterm', or signal number.
	   Send signal to the target application's process group when ending/shutting down profiling session.
	   Default is 'sigterm', so the application is terminated when profiling session ends/is shutdown.

	--mpi-impl=

	   Possible values are 'openmpi' or 'mpich'.
	   Specify the MPI implementation used by the application.
	   Use 'mpich' for MPICH and its derivatives.
	   Note that this switch is applicable only when --trace=mpi is specified.
	   If no MPI implementation is specified, nsys tries to automatically detect it based on the
	   dynamic linker's search path. If this fails, 'openmpi' is used.

	-n, --inherit-environment=

	   Possible values are 'true' or 'false'.
	   Inherit environment variables.
	   Default is 'true'.

	--nic-metrics=

	   Possible values are 'true' or 'false'.
	   Collect metrics from NIC/HCA devices.
	   Default is 'false'. System scope.

	--nvtx-domain-[include|exclude]=

	   Possible values are a comma-separated list of NVTX domains.
	   Choose the include or exclude option to (only) include or exclude the specified domains. The
	   options are mutually exclusive. 'default' filters the NVTX default domain. A domain with
	   this name and commas in a domain name have to be escaped with '\'.
	   Note that both switches are applicable only when --trace=nvtx is specified.

	-o, --output=

	   Output report filename.
	   Any %q{ENV_VAR} pattern in the filename will be substituted with the value of the
	   environment variable.
	   Any %h pattern in the filename will be substituted with the hostname of the system.
	   Any %p pattern in the filename will be substituted with the PID of the target process or
	   the PID of the root process if there is a process tree.
	   Any %n pattern in the filename will be substituted with the minimal positive integer that is
	   not already occupied.
	   Any %% pattern in the filename will be substituted with %.
	   Default is 'report%n'.

	--opengl-gpu-workload=

	   Possible values are 'true' or 'false'.
	   If true, trace the OpenGL workload's GPU activity.
	   Note that this switch is applicable only when --trace=opengl is specified.
	   Default is 'true'. Application scope.

	--os-events=

	   OS events to sample.
	   Possible values are (for example) '0,3,...'.
	   Use the '--os-events=help' switch to see the full list of events.
	   Multiple values can be selected, separated by commas only (no spaces).
	   Use the --event-sample switch to enable.

	--osrt-backtrace-stack-size=

	   Set the stack dump size, in bytes, to generate backtraces for OS runtime libraries calls.
	   Default is 6144 (6 KiB).

	--osrt-backtrace-threshold=

	   Set the duration, in nanoseconds, that all OS  runtime  libraries calls must execute before
	   backtraces are collected.
	   Default is 80000 (80 microseconds).

	--osrt-threshold=

	   Set the duration, in nanoseconds, that Operating System Runtime (osrt) APIs must execute
	   before they are traced. Values much less than 1000 may cause significant overhead and
	   result in extremely large result files.
	   Default is 1000 (1 microsecond).

	-p, --nvtx-capture=

	   Possible values are: `range@domain' to specify both range and domain,
	   `range' to specify range in default domain, `range@*' to specify a range in any domain.
	   NVTX message and domain to trigger the profiling session.
	   '@' can be escaped with backslash '\'.
	   Note that this switch is applicable only when --capture-range=nvtx is specified.

	--python-backtrace=

	   Possible values are 'cuda', 'none', 'false'.
	   Specify Python backtrace collection trigger.
	   Multiple APIs can be selected, separated by commas only (no spaces).
	   Note that you must enable tracing for the selected API.
	   Default is 'none'.

	--python-functions-trace=

	   Specify the path to the json file containing the requested
	   Python functions to trace.
	   Note that nvtx package must be installed on the target Python.
	   See '/usr/local/cuda-12.4/NsightSystems-cli-2024.2.1/target-linux-x64/PythonFunctionsTrace/annotations.json' as an example.

	--python-sampling=

	   Possible values are 'true' or 'false'.
	   Sample Python backtrace.
	   Default is 'false'.
	   Note: This feature provides meaningful backtraces for Python processes.
	   When profiling Python-only workflows, consider disabling the CPU sampling option to reduce overhead.

	--python-sampling-frequency=

	   Specify Python sampling frequency.
	   Minimum supported frequency is '1' (Hz).
	   Maximum supported frequency is '2000' (Hz).
	   Default is '1000' (Hz).

	--resolve-symbols=

	   Possible values are 'true' or 'false'.
	   Resolve symbols of captured samples and backtraces.
	   Default is 'false' on Windows, 'true' on other platforms.

	--run-as=

	   Run the target application as the specified username.
	   If not specified, the target application will be run by the same user
	   as Nsight Systems.
	   Requires root privileges.

	-s, --sample=

	   Possible values are 'process-tree', 'system-wide' or 'none'.
	   Collect CPU IP/backtrace samples. Select 'none' to disable sampling.
	   'system-wide' requires root privileges or a paranoid level of 0 or less.
	   If a target application is launched, the default is 'process-tree', otherwise the default
	   is 'none'.

	--samples-per-backtrace=

	   Possible values are integers between 1 and 32.
	   The number of CPU IP samples collected for every CPU IP sample backtrace collected. For
	   example, if set to 4, on the fourth CPU IP sample collected, a backtrace will also be
	   collected. Lower values increase the amount of data collected. Higher values can reduce
	   overhead and help reduce the number of CPU IP samples dropped.
	   Default is 1. If DWARF backtraces are collected, the default is 4.

	--sampling-period=

	   Possible values are integers between 39601552 and 309387.
	   The number of CPU Clock (sw) events counted before a CPU instruction pointer (IP)
	   sample is collected.
	   If configured, backtraces may also be collected. The smaller the sampling period, the higher
	   the sampling rate.
	   Note that lower sampling periods will increase overhead and significantly increase the size
	   of the result file(s).
	   Default is 2475097. If DWARF backtraces are collected, the default is 4950195.

	--session-new=

	   Start the collection in a new named session. The option  argument represents the session
	   name.
	   The session name must start with an alphabetical character followed by printable or space
	   characters.
	   Any '%q{ENV_VAR}' pattern in the session name will be substituted with the value of the
	   environment variable.
	   Any '%h' pattern in the option argument will be substituted with the hostname of the system.
	   Any '%%' pattern in the option argument will be substituted with '%'.

	--start-frame-index=

	   Start the recording session when the frame index reaches the frame number preceding the
	   start frame index. Minimum supported frame is '1'.
	   Note when it is selected cannot include any other start options.
	   If not specified the default is disabled. Application scope.

	--stats=

	   Possible values are 'true' or 'false'.
	   Generate summary statistics after the collection.
	   When set to true, an SQLite database file will be created after the collection.
	   Default is 'false'.

	-t, --trace=

	   Possible values are 'cuda', 'nvtx', 'cublas', 'cublas-verbose', 'cusolver',
	   'cusolver-verbose', 'cusparse', 'cusparse-verbose', 'mpi', 'oshmem', 'ucx',
	   'osrt', 'cudnn', 'opengl', 'opengl-annotations', 'openacc', 'openmp',
	   'nvvideo', 'vulkan', 'vulkan-annotations', 'python-gil' or 'none'.
	   Select the API(s) to trace. Multiple APIs can be selected, separated by commas only
	   (no spaces).
	   If '<api>-annotations' is selected, the corresponding API will also be traced.
	   If 'none' is selected, no APIs are traced.
	   Default is 'cuda,nvtx,osrt,opengl'. Application scope.

	--trace-fork-before-exec=

	   Possible values are 'true' or 'false'.
	   If true, trace any child process after fork and before they call one of the exec functions.
	   Beware, tracing in this interval relies on undefined behavior and might cause your
	   application to crash or deadlock. This option is only available on Linux and Windows
	   target platforms.
	   Default is 'false'.

	--vulkan-gpu-workload=

	   Possible values are 'individual', 'batch', 'none', 'true' or 'false'.
	   If individual or true, trace each Vulkan workload's GPU activity individually.
	   If batch, trace Vulkan workloads' GPU activity in vkQueueSubmit call batches.
	   If none or false, do not trace Vulkan workloads' GPU activity.
	   Note that this switch is applicable only when --trace=vulkan is specified.
	   Default is 'individual'. Application scope.

	-w, --show-output=

	   Possible values are 'true' or 'false'.
	   If true, send target process's stdout and stderr streams to both the console and
	   stdout/stderr files which are added to the report file.
	   If false, only send target process stdout and stderr streams to the stdout/stderr files
	   which are added to the report file.
	   Default is 'true'.

	--wait=

	   Possible values are 'primary' or 'all'.
	   If 'primary', the CLI will wait on the application process termination.
	   If 'all', the CLI will additionally wait on re-parented processes created by the
	   application.
	   Default is 'all'.

	-x, --stop-on-exit=

	   Possible values are 'true' or 'false'.
	   Stop profiling when the launched application exits.
	   If stop-on-exit=false, duration must be greater than 0.
	   Default is 'true'.

	-Y, --start-later=

	   Possible values are 'true' or 'false'.
	   Delays collection indefinitely until the nsys start
	   command is executed for this session.
	   Enabling this option overrides the --delay option.
	   Default is 'false'.

	-y, --delay=

	   Collection start delay in seconds.
	   Default is 0.
