
usage: nsys stats [<args>] <input-file>

<input-file> : Read data from a .nsys-rep or exported .sqlite file.

	-f, --format <name[:args...][,name[:args...]...]>

           Specify the output format. The special name "." indicates the
           default format for the given output.

           The default format for console is:    column
           The default format for files is:      csv
           The default format for processes is:  csv

           Available formats (and file extensions):

             column     Human readable columns (.txt)
             table      Human readable table (.txt)
             csv        Comma Separated Values (.csv)
             tsv        Tab Separated Values (.tsv)
             json       JavaScript Object Notation (.json)
             hdoc       HTML5 document with <table> (.html)
             htable     Raw HTML <table> (.html)

           This option may be used multiple times. Multiple formats may also
           be specified using a comma-separated list. If a list item is left
           blank by using repeating commas, the last specified format (and args)
           will be repeated to fill in the blanks. If the list starts with a
           comma, creating an initial blank format, the default will be
           substituted.

	--filter-nvtx  <nvtx_range_name>[@<domain_name>][/<index>]

           Filter the events and data records used to generate reports by
           the time range defined by the first instance of the given NVTX
           range. Only events or records that overlap with any of the given
           NVTX range are used to compile and calculate the report. Note
           that an event or data record can start before or end after the
           given NVTX range, as long as it exists at some point during the
           specified NVTX range.

           The domain name is not optional, and can only be excluded if
           the range was not assigned to a domain; if the range has a
           domain it must be given.

           By default, the first instance of the given NVTX range (as
           defined by the start time) is used to define the time range. A
           different instance of the given NVTX range can be used by
           specifying an index number.  The index is zero-based, so the first
           instance has an index of "0". If the characters after the final
           slash do not represent a positive integer, it is assumed they
           are part of the range/domain name.

           If used in conjunction with the --filter-time option, this option
           will override any explicit time values.

	--filter-time  [<start_time>]/[<end_time>]

           Filter the events and data records used to generate reports by
           the given time range. Only events or records that overlap with
           any of the given time range are used to compile and calculate
           the report. Note that an event or data record can start before
           or end after the given time range, as long as it exists at some
           point during the specified time range.

           Times are defined in nanoseconds. At least one time value is
           required. Any omitted time value will default to the minimum or
           maximum value (approximately +/- 290 years from the zero-point).
           The start time must be less than or equal to the end time.

           The time values are a series of integer or floating-point values
           followed by an optional unit. If no unit is given, the number is
           assumed to be in nanoseconds. Positive and negative values are
           supported, as well as scientific "e" notation. More than one
           value/unit can be given as long as there are no spaces. The
           units do not need to be given in any order and can even repeat.

           The following units are understood:

              ns, nsec : nanosecond
              us, usec : microsecond
              ms, msec : millisecond
              s, sec   : second
              m, min   : minute (60 seconds)
              h, hour  : hour (3600 seconds)

           For example, the value "1s2ms3us4ns" would indicate 1,002,003,004
           nanoseconds. "2ns5us2" would be 5004 nanoseconds (2 nanoseconds
           plus 5 microseconds plus 2 nanoseconds). A floating-point value
           is converted as a 64-bit "double" and is subject to the precision
           limitations of that format.

           If used in conjunction with the --filter-nvtx option, the
           --filter-nvtx option will take precedence.

	--force-export [true|false]

           Force a re-export of the SQLite file from the specified .nsys-rep file,
           even if an SQLite file already exists.

	--force-overwrite [true|false]

           Overwrite any existing output file(s).

	-h, --help=[<tag>]

	   Print the command's help menu. The switch can take one optional
	   argument that will be used as a tag. If a tag is provided, only options
	   relevant to the tag will be printed.
	   The available help menu tags for this command are:

	   export, format, help, nvtx, output, report, reports, rule, sql, sqlite,
	   stats, status, time, and units.

	--help-formats [<format_name>|ALL]

           With no argument, list a summary of the available output formats.
           If a format name is given, a more detailed explanation of the
           the format is displayed. If 'ALL' is given, a more detailed
           explanation of all available formats is displayed.

	--help-reports [<report_name>|ALL]

           With no argument, list a summary of the available summary and
           trace reports. If a report name is given, a more detailed
           explanation of the report is displayed. If 'ALL' is given, a
           more detailed explanation of all available reports is displayed.

	-o, --output <output>

           Specify the output mechanism. There are three output mechanisms:
           print to console, output to file, or output to command. If no
           outputs are designated, the default is to print rules to the
           console.

           This option may be used multiple times. Multiple outputs may also
           be specified using a comma-separated list. If a list item is left
           blank by using repeating commas, the last specified output will be
           repeated to fill in the blanks. If the list starts with a comma,
           creating an initial blank output, the default will be substituted.

           If the given output name is "-", the output will be displayed
           on the console. If the output name starts with "@", the output
           designates a command to run. The nsys command will be executed and
           the analysis output will be piped into the command. Any other output
           is assumed to be the base path and name for a file.

           If a file basename is given, the filename used will be:

              <basename>_<analysis&args>.<output_format>

           The default base (including path) is the name of the SQLite file
           (as derived from the input file or --sqlite option), minus the
           extension. The output "." can be used to indicate the analysis
           should be output to a file, and the default basename should be
           used. To write one or more analysis outputs to files using the
           default basename, use the option: "--output .".

           If the output starts with "@", the nsys command output is piped to
           the given command. The command is run, and the output
           is piped to the command's stdin (standard-input). The command's
           stdout and stderr remain attached to the console, so any output
           will be displayed directly to the console.

           Be aware there are some limitations in how the command string is
           parsed. No shell expansions (including *, ?, [], and ~) are
           supported. The command cannot be piped to another command, nor
           redirected to a file using shell syntax. The command and command
           arguments are split on whitespace, and no quotes (within the command
           syntax) are supported. For commands that require complex command
           line syntax, it is suggested that the command be put into a shell
           script file, and the script designated as the output command.

	-q, --quiet

           Only display errors.

	-r, --report <name[:args...][,name[:args...]...]>

           Specify the report(s) to generate, including any arguments. This
           option may be used multiple times. Multiple reports may also be
           specified using a comma-separated list. If a list item is left
           blank by using repeating commas, the last specified report (and args)
           will be repeated to fill in the blanks. This allows the same report
           to be executed multiple times, possibly given different formats or
           outputs. If the list starts with a comma, creating an initial blank
           report name, that is considered an error.

           If no reports are given, the following will be used as the
           default report set:

             nvtx_sum
             osrt_sum
             cuda_api_sum
             cuda_gpu_kern_sum
             cuda_gpu_mem_time_sum
             cuda_gpu_mem_size_sum
             openmp_sum
             opengl_khr_range_sum
             opengl_khr_gpu_range_sum
             vulkan_marker_sum
             vulkan_gpu_marker_sum
             dx11_pix_sum
             dx12_gpu_marker_sum
             dx12_pix_sum
             wddm_queue_sum
             um_sum
             um_total_sum
             um_cpu_page_faults_sum
             openacc_sum

           See --help-reports for a list of built-in reports, along with more
           information on each report.

	--report-dir <path>

           Add one or more directories to the path used to find report scripts.
           This is usually only needed if you have one or more directories with
           personal scripts. This option may be used multiple times. Each use
           adds additional directories to the end of the path.

           A search path can also be defined using the environment variable
           "NSYS_STATS_REPORT_PATH". Directories added this way will
           be added after the application flags.

           The last two entries in the path will always be the current working
           directory, followed by the directory containing the packaged nsys
           reports.

	--sqlite <file.sqlite>

           Specify the SQLite export filename. If this file exists, it will
           be used. If this file doesn't exist (or if --force-export was given)
           this file will be created from the specified .nsys-rep file before
           processing. This option cannot be used if the specified input
           file is also an SQLite file.

	--timeunit <time unit>

           Set basic unit of time. The default is nanoseconds.
           Longest prefix matching is done on the following units:

              nsec nanoseconds usec microseconds msec milliseconds seconds

           Prefix matching means that, in addition to the full unit names,
           prefixes can be used to specify a time unit. For example, "sec" can
           be used to specify "seconds", "us" for "usec" (microseconds), or
           "milli" for "milliseconds". This is similar to passing a
           ":time=<unit>" argument to every formatter, although the formatter
           uses more strict naming conventions. See "nsys stats --help-formats
           column" for more detailed information on unit conversion.


  The "nsys stats" command generates a series of summary or trace reports.
  These reports can be output to the console, or to individual files. Reports
  can be presented in a variety of different output formats from human-readable
  columns of text, to formats more appropriate for data exchange, such as CSV.

  Reports are generated from an SQLite export of a .nsys-rep file. If a .nsys-rep file
  is specified, nsys will look for an accompanying SQLite file and use it. If
  no SQLite file exists, one will be exported and created.

  Individual reports are generated by calling out to plug-ins that read data
  from the SQLite file and return their report data in CSV format. Nsys ingests
  this data and formats it as requested, then displays the data to the console
  or writes it to a file. Adding new reports is as simple as writing a plug-in
  that can read the SQLite file and generate the required CSV output. See the
  shipped plug-ins as an example. Both reports and formatters may take arguments
  to tweak their processing.

  Reports are processed using a three-tuple that consists of 1) the report name
  (and any arguments), 2) the presentation format (and any arguments), and
  3) the output (filename, console, or external process). The first report
  specified uses the first format specified, and is presented via the first
  output specified. The second report uses the second format for the second
  output, and so forth. If more reports are specified than formats or outputs,
  the format and/or output list is expanded to match the number of provided
  reports by repeating the last specified element of the list (or the default,
  if nothing was specified).

  EXAMPLES

  This command will output the default reports to the console using the default
  ("column") format:

    $ nsys stats report1.nsys-rep


  This command will output the "cuda_gpu_trace" report to the console in column
  format:

    $ nsys stats --report cuda_gpu_trace report1.nsys-rep


  This command will generate three reports. The "cuda_gpu_trace" report will be
  output to the file "report1_cuda_gpu_trace.csv" in CSV format. The other two
  reports, "cuda_gpu_kern_sum" and "cuda_api_sum", will be output to the
  console as columns of data. Although three reports were given, only two
  formats and outputs are given. To reconcile this, both the list of formats
  and outputs is expanded to match the list of reports by repeating the last
  element:

    $ nsys stats --report cuda_gpu_trace --report cuda_gpu_kern_sum --report \
            cuda_api_sum --format csv,column --output .,- report1.nsys-rep


  This command generates one report, outputting the report to the "grep"
  command. The grep command is used to filter out everything but the header,
  formatting, and the "cudaFree" data, and displays the results to the console:

    $ nsys stats --report cuda_api_sum --format table \
            --output @"grep -E (-|Name|cudaFree)" test.sqlite
